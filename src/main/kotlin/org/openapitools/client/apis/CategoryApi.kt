/**
 * Catalog API
 *
 * Methods for collecting product/sku catalog data, categories, brands and other information. <br><br> All content that comes between {{}} keys must be replaced with the correct data before performing the request. <br><br> Common parameters that must be changed in most VTEX requests <br> {{accountName}} => Store account name <br> {{environment}} => The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta <br> {{X-VTEX-API-AppKey}} => Located in the headers of the requests, user authentication key <br> {{X-VTEX-API-AppToken}} => Located in the headers of the requests, authentication password
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.Example1
import org.openapitools.client.models.InlineObject7
import org.openapitools.client.models.InlineObject8
import org.openapitools.client.models.InlineResponse20014

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CategoryApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://{accountName}.{environment}.com.br")
        }
    }

    /**
    * Get Category by ID
    * Retrieves general information about a Category
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId Category’s unique numerical identifier 
    * @return InlineResponse20014
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtCategoryCategoryIdGet(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.Int) : InlineResponse20014 {
        val localVarResponse = apiCatalogPvtCategoryCategoryIdGetWithHttpInfo(contentType = contentType, accept = accept, categoryId = categoryId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20014
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Category by ID
    * Retrieves general information about a Category
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId Category’s unique numerical identifier 
    * @return ApiResponse<InlineResponse20014?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtCategoryCategoryIdGetWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.Int) : ApiResponse<InlineResponse20014?> {
        val localVariableConfig = apiCatalogPvtCategoryCategoryIdGetRequestConfig(contentType = contentType, accept = accept, categoryId = categoryId)

        return request<Unit, InlineResponse20014>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtCategoryCategoryIdGet
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId Category’s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtCategoryCategoryIdGetRequestConfig(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/category/{categoryId}".replace("{"+"categoryId"+"}", "$categoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update Category
    * Updates a previously existing Category
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId Category’s unique numerical identifier 
    * @param inlineObject7  (optional)
    * @return InlineResponse20014
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtCategoryCategoryIdPut(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.Int, inlineObject7: InlineObject7?) : InlineResponse20014 {
        val localVarResponse = apiCatalogPvtCategoryCategoryIdPutWithHttpInfo(contentType = contentType, accept = accept, categoryId = categoryId, inlineObject7 = inlineObject7)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20014
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update Category
    * Updates a previously existing Category
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId Category’s unique numerical identifier 
    * @param inlineObject7  (optional)
    * @return ApiResponse<InlineResponse20014?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtCategoryCategoryIdPutWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.Int, inlineObject7: InlineObject7?) : ApiResponse<InlineResponse20014?> {
        val localVariableConfig = apiCatalogPvtCategoryCategoryIdPutRequestConfig(contentType = contentType, accept = accept, categoryId = categoryId, inlineObject7 = inlineObject7)

        return request<InlineObject7, InlineResponse20014>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtCategoryCategoryIdPut
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId Category’s unique numerical identifier 
    * @param inlineObject7  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtCategoryCategoryIdPutRequestConfig(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.Int, inlineObject7: InlineObject7?) : RequestConfig<InlineObject7> {
        val localVariableBody = inlineObject7
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/catalog/pvt/category/{categoryId}".replace("{"+"categoryId"+"}", "$categoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create Category
    * Creates a new Category from scratch
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject8  (optional)
    * @return InlineResponse20014
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtCategoryPost(contentType: kotlin.String, accept: kotlin.String, inlineObject8: InlineObject8?) : InlineResponse20014 {
        val localVarResponse = apiCatalogPvtCategoryPostWithHttpInfo(contentType = contentType, accept = accept, inlineObject8 = inlineObject8)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20014
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create Category
    * Creates a new Category from scratch
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject8  (optional)
    * @return ApiResponse<InlineResponse20014?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtCategoryPostWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, inlineObject8: InlineObject8?) : ApiResponse<InlineResponse20014?> {
        val localVariableConfig = apiCatalogPvtCategoryPostRequestConfig(contentType = contentType, accept = accept, inlineObject8 = inlineObject8)

        return request<InlineObject8, InlineResponse20014>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtCategoryPost
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject8  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtCategoryPostRequestConfig(contentType: kotlin.String, accept: kotlin.String, inlineObject8: InlineObject8?) : RequestConfig<InlineObject8> {
        val localVariableBody = inlineObject8
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog/pvt/category",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Category Tree
    * Retrieves the Category Tree of your store. Get all the category levels registered in the Catalog or define the level up to which you want to get.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryLevels Value of the category level you need to retrieve 
    * @return kotlin.collections.List<Example1>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun categoryTree(contentType: kotlin.String, accept: kotlin.String, categoryLevels: kotlin.String) : kotlin.collections.List<Example1> {
        val localVarResponse = categoryTreeWithHttpInfo(contentType = contentType, accept = accept, categoryLevels = categoryLevels)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Example1>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Category Tree
    * Retrieves the Category Tree of your store. Get all the category levels registered in the Catalog or define the level up to which you want to get.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryLevels Value of the category level you need to retrieve 
    * @return ApiResponse<kotlin.collections.List<Example1>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun categoryTreeWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, categoryLevels: kotlin.String) : ApiResponse<kotlin.collections.List<Example1>?> {
        val localVariableConfig = categoryTreeRequestConfig(contentType = contentType, accept = accept, categoryLevels = categoryLevels)

        return request<Unit, kotlin.collections.List<Example1>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation categoryTree
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryLevels Value of the category level you need to retrieve 
    * @return RequestConfig
    */
    fun categoryTreeRequestConfig(contentType: kotlin.String, accept: kotlin.String, categoryLevels: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pub/category/tree/{categoryLevels}".replace("{"+"categoryLevels"+"}", "$categoryLevels"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
