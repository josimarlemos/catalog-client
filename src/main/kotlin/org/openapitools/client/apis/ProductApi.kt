/**
 * Catalog API
 *
 * Methods for collecting product/sku catalog data, categories, brands and other information. <br><br> All content that comes between {{}} keys must be replaced with the correct data before performing the request. <br><br> Common parameters that must be changed in most VTEX requests <br> {{accountName}} => Store account name <br> {{environment}} => The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta <br> {{X-VTEX-API-AppKey}} => Located in the headers of the requests, user authentication key <br> {{X-VTEX-API-AppToken}} => Located in the headers of the requests, authentication password
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.InlineObject
import org.openapitools.client.models.InlineObject1
import org.openapitools.client.models.InlineResponse200
import org.openapitools.client.models.InlineResponse2001
import org.openapitools.client.models.InlineResponse2002
import org.openapitools.client.models.InlineResponse2003
import org.openapitools.client.models.InlineResponse2004

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ProductApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://{accountName}.{environment}.com.br")
        }
    }

    /**
    * Create Product
    * Creates a new Product from scratch
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject1  (optional)
    * @return InlineResponse2002
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtProductPost(contentType: kotlin.String, accept: kotlin.String, inlineObject1: InlineObject1?) : InlineResponse2002 {
        val localVarResponse = apiCatalogPvtProductPostWithHttpInfo(contentType = contentType, accept = accept, inlineObject1 = inlineObject1)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2002
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create Product
    * Creates a new Product from scratch
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject1  (optional)
    * @return ApiResponse<InlineResponse2002?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtProductPostWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, inlineObject1: InlineObject1?) : ApiResponse<InlineResponse2002?> {
        val localVariableConfig = apiCatalogPvtProductPostRequestConfig(contentType = contentType, accept = accept, inlineObject1 = inlineObject1)

        return request<InlineObject1, InlineResponse2002>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtProductPost
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject1  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtProductPostRequestConfig(contentType: kotlin.String, accept: kotlin.String, inlineObject1: InlineObject1?) : RequestConfig<InlineObject1> {
        val localVariableBody = inlineObject1
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog/pvt/product",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update Product
    * Updates an existent Product
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @param inlineObject  (optional)
    * @return InlineResponse2002
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtProductProductIdPut(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int, inlineObject: InlineObject?) : InlineResponse2002 {
        val localVarResponse = apiCatalogPvtProductProductIdPutWithHttpInfo(contentType = contentType, accept = accept, productId = productId, inlineObject = inlineObject)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2002
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update Product
    * Updates an existent Product
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @param inlineObject  (optional)
    * @return ApiResponse<InlineResponse2002?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtProductProductIdPutWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int, inlineObject: InlineObject?) : ApiResponse<InlineResponse2002?> {
        val localVariableConfig = apiCatalogPvtProductProductIdPutRequestConfig(contentType = contentType, accept = accept, productId = productId, inlineObject = inlineObject)

        return request<InlineObject, InlineResponse2002>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtProductProductIdPut
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @param inlineObject  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtProductProductIdPutRequestConfig(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int, inlineObject: InlineObject?) : RequestConfig<InlineObject> {
        val localVariableBody = inlineObject
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/catalog/pvt/product/{productId}".replace("{"+"productId"+"}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Product by ID
    * Retrieves a specific Product by its ID. This information is exactly what is needed to create a new Product.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return InlineResponse2001
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProductbyid(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.String) : InlineResponse2001 {
        val localVarResponse = getProductbyidWithHttpInfo(contentType = contentType, accept = accept, productId = productId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Product by ID
    * Retrieves a specific Product by its ID. This information is exactly what is needed to create a new Product.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return ApiResponse<InlineResponse2001?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProductbyidWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.String) : ApiResponse<InlineResponse2001?> {
        val localVariableConfig = getProductbyidRequestConfig(contentType = contentType, accept = accept, productId = productId)

        return request<Unit, InlineResponse2001>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getProductbyid
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return RequestConfig
    */
    fun getProductbyidRequestConfig(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/product/{productId}".replace("{"+"productId"+"}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Product and SKU IDs
    * Retrieves the IDs of all products and SKUs from a specific category by its category ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId Fill this variable with the category ID that you need retrieves Product and SKU (optional, default to 1)
    * @param from Insert the number that will start the request result (optional, default to 1)
    * @param to Insert the number that will end the request result (optional, default to 10)
    * @return InlineResponse200
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun productAndSkuIds(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.Int?, from: kotlin.Int?, to: kotlin.Int?) : InlineResponse200 {
        val localVarResponse = productAndSkuIdsWithHttpInfo(contentType = contentType, accept = accept, categoryId = categoryId, from = from, to = to)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse200
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Product and SKU IDs
    * Retrieves the IDs of all products and SKUs from a specific category by its category ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId Fill this variable with the category ID that you need retrieves Product and SKU (optional, default to 1)
    * @param from Insert the number that will start the request result (optional, default to 1)
    * @param to Insert the number that will end the request result (optional, default to 10)
    * @return ApiResponse<InlineResponse200?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun productAndSkuIdsWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.Int?, from: kotlin.Int?, to: kotlin.Int?) : ApiResponse<InlineResponse200?> {
        val localVariableConfig = productAndSkuIdsRequestConfig(contentType = contentType, accept = accept, categoryId = categoryId, from = from, to = to)

        return request<Unit, InlineResponse200>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation productAndSkuIds
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId Fill this variable with the category ID that you need retrieves Product and SKU (optional, default to 1)
    * @param from Insert the number that will start the request result (optional, default to 1)
    * @param to Insert the number that will end the request result (optional, default to 10)
    * @return RequestConfig
    */
    fun productAndSkuIdsRequestConfig(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.Int?, from: kotlin.Int?, to: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (categoryId != null) {
                    put("categoryId", listOf(categoryId.toString()))
                }
                if (from != null) {
                    put("_from", listOf(from.toString()))
                }
                if (to != null) {
                    put("_to", listOf(to.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/products/GetProductAndSkuIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Product&#39;s SKUs by Product ID
    * Retrieves data about the product and all SKUs related to it by the product&#39;s ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun productVariations(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : Unit {
        val localVarResponse = productVariationsWithHttpInfo(contentType = contentType, accept = accept, productId = productId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Product&#39;s SKUs by Product ID
    * Retrieves data about the product and all SKUs related to it by the product&#39;s ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun productVariationsWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = productVariationsRequestConfig(contentType = contentType, accept = accept, productId = productId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation productVariations
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return RequestConfig
    */
    fun productVariationsRequestConfig(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pub/products/variations/{productId}".replace("{"+"productId"+"}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Product and its general context
    * Retrieves a specific product&#39;s general information as name, description and the trade policies that it is included.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return InlineResponse2003
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun productandTradePolicy(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : InlineResponse2003 {
        val localVarResponse = productandTradePolicyWithHttpInfo(contentType = contentType, accept = accept, productId = productId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Product and its general context
    * Retrieves a specific product&#39;s general information as name, description and the trade policies that it is included.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return ApiResponse<InlineResponse2003?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun productandTradePolicyWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : ApiResponse<InlineResponse2003?> {
        val localVariableConfig = productandTradePolicyRequestConfig(contentType = contentType, accept = accept, productId = productId)

        return request<Unit, InlineResponse2003>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation productandTradePolicy
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return RequestConfig
    */
    fun productandTradePolicyRequestConfig(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/products/productget/{productId}".replace("{"+"productId"+"}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Product by RefId
    * Retrieves a specific product by its Reference ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param refId Product Referecial Code 
    * @return InlineResponse2004
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun productbyRefId(contentType: kotlin.String, accept: kotlin.String, refId: kotlin.String) : InlineResponse2004 {
        val localVarResponse = productbyRefIdWithHttpInfo(contentType = contentType, accept = accept, refId = refId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2004
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Product by RefId
    * Retrieves a specific product by its Reference ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param refId Product Referecial Code 
    * @return ApiResponse<InlineResponse2004?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun productbyRefIdWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, refId: kotlin.String) : ApiResponse<InlineResponse2004?> {
        val localVariableConfig = productbyRefIdRequestConfig(contentType = contentType, accept = accept, refId = refId)

        return request<Unit, InlineResponse2004>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation productbyRefId
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param refId Product Referecial Code 
    * @return RequestConfig
    */
    fun productbyRefIdRequestConfig(contentType: kotlin.String, accept: kotlin.String, refId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/products/productgetbyrefid/{refId}".replace("{"+"refId"+"}", "$refId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Product Review Rate by Product ID
    * Retrieves the review rate of a product by this product&#39;s ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return java.math.BigDecimal
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reviewRateProduct(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : java.math.BigDecimal {
        val localVarResponse = reviewRateProductWithHttpInfo(contentType = contentType, accept = accept, productId = productId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.math.BigDecimal
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Product Review Rate by Product ID
    * Retrieves the review rate of a product by this product&#39;s ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return ApiResponse<java.math.BigDecimal?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reviewRateProductWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : ApiResponse<java.math.BigDecimal?> {
        val localVariableConfig = reviewRateProductRequestConfig(contentType = contentType, accept = accept, productId = productId)

        return request<Unit, java.math.BigDecimal>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation reviewRateProduct
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return RequestConfig
    */
    fun reviewRateProductRequestConfig(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/addon/pvt/review/GetProductRate/{productId}".replace("{"+"productId"+"}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
