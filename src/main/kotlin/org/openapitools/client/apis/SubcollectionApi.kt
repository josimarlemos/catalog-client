/**
 * Catalog API
 *
 * Methods for collecting product/sku catalog data, categories, brands and other information. <br><br> All content that comes between {{}} keys must be replaced with the correct data before performing the request. <br><br> Common parameters that must be changed in most VTEX requests <br> {{accountName}} => Store account name <br> {{environment}} => The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta <br> {{X-VTEX-API-AppKey}} => Located in the headers of the requests, user authentication key <br> {{X-VTEX-API-AppToken}} => Located in the headers of the requests, authentication password
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.InlineObject13
import org.openapitools.client.models.InlineObject14
import org.openapitools.client.models.InlineObject15
import org.openapitools.client.models.InlineResponse20018

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SubcollectionApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://{accountName}.{environment}.com.br")
        }
    }

    /**
    * Reposition SKU on the SubCollection
    * Edits an SKU position that already exists in the subcollection.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param collectionId Collection’s unique numerical identifier 
    * @param inlineObject15  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtCollectionCollectionIdPositionPost(contentType: kotlin.String, accept: kotlin.String, collectionId: kotlin.Int, inlineObject15: InlineObject15?) : Unit {
        val localVarResponse = apiCatalogPvtCollectionCollectionIdPositionPostWithHttpInfo(contentType = contentType, accept = accept, collectionId = collectionId, inlineObject15 = inlineObject15)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Reposition SKU on the SubCollection
    * Edits an SKU position that already exists in the subcollection.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param collectionId Collection’s unique numerical identifier 
    * @param inlineObject15  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtCollectionCollectionIdPositionPostWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, collectionId: kotlin.Int, inlineObject15: InlineObject15?) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtCollectionCollectionIdPositionPostRequestConfig(contentType = contentType, accept = accept, collectionId = collectionId, inlineObject15 = inlineObject15)

        return request<InlineObject15, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtCollectionCollectionIdPositionPost
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param collectionId Collection’s unique numerical identifier 
    * @param inlineObject15  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtCollectionCollectionIdPositionPostRequestConfig(contentType: kotlin.String, accept: kotlin.String, collectionId: kotlin.Int, inlineObject15: InlineObject15?) : RequestConfig<InlineObject15> {
        val localVariableBody = inlineObject15
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog/pvt/collection/{collectionId}/position".replace("{"+"collectionId"+"}", "$collectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Subcollection by Collection ID
    * Retrieves all Subcollections by its Collection ID.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param collectionId Collection’s unique numerical identifier 
    * @return kotlin.collections.List<InlineResponse20018>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtCollectionCollectionIdSubcollectionGet(contentType: kotlin.String, accept: kotlin.String, collectionId: kotlin.Int) : kotlin.collections.List<InlineResponse20018> {
        val localVarResponse = apiCatalogPvtCollectionCollectionIdSubcollectionGetWithHttpInfo(contentType = contentType, accept = accept, collectionId = collectionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<InlineResponse20018>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Subcollection by Collection ID
    * Retrieves all Subcollections by its Collection ID.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param collectionId Collection’s unique numerical identifier 
    * @return ApiResponse<kotlin.collections.List<InlineResponse20018>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtCollectionCollectionIdSubcollectionGetWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, collectionId: kotlin.Int) : ApiResponse<kotlin.collections.List<InlineResponse20018>?> {
        val localVariableConfig = apiCatalogPvtCollectionCollectionIdSubcollectionGetRequestConfig(contentType = contentType, accept = accept, collectionId = collectionId)

        return request<Unit, kotlin.collections.List<InlineResponse20018>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtCollectionCollectionIdSubcollectionGet
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param collectionId Collection’s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtCollectionCollectionIdSubcollectionGetRequestConfig(contentType: kotlin.String, accept: kotlin.String, collectionId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/collection/{collectionId}/subcollection".replace("{"+"collectionId"+"}", "$collectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create SubCollection
    * Creates a new SubCollection inclusion or exclusion under a Collection.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject14  (optional)
    * @return InlineResponse20018
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtSubcollectionPost(contentType: kotlin.String, accept: kotlin.String, inlineObject14: InlineObject14?) : InlineResponse20018 {
        val localVarResponse = apiCatalogPvtSubcollectionPostWithHttpInfo(contentType = contentType, accept = accept, inlineObject14 = inlineObject14)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20018
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create SubCollection
    * Creates a new SubCollection inclusion or exclusion under a Collection.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject14  (optional)
    * @return ApiResponse<InlineResponse20018?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtSubcollectionPostWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, inlineObject14: InlineObject14?) : ApiResponse<InlineResponse20018?> {
        val localVariableConfig = apiCatalogPvtSubcollectionPostRequestConfig(contentType = contentType, accept = accept, inlineObject14 = inlineObject14)

        return request<InlineObject14, InlineResponse20018>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtSubcollectionPost
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject14  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtSubcollectionPostRequestConfig(contentType: kotlin.String, accept: kotlin.String, inlineObject14: InlineObject14?) : RequestConfig<InlineObject14> {
        val localVariableBody = inlineObject14
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog/pvt/subcollection",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete SubCollection
    * Deletes a previously SubCollection.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param subCollectionId Subcollection’s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtSubcollectionSubCollectionIdDelete(contentType: kotlin.String, accept: kotlin.String, subCollectionId: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtSubcollectionSubCollectionIdDeleteWithHttpInfo(contentType = contentType, accept = accept, subCollectionId = subCollectionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete SubCollection
    * Deletes a previously SubCollection.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param subCollectionId Subcollection’s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtSubcollectionSubCollectionIdDeleteWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, subCollectionId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtSubcollectionSubCollectionIdDeleteRequestConfig(contentType = contentType, accept = accept, subCollectionId = subCollectionId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtSubcollectionSubCollectionIdDelete
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param subCollectionId Subcollection’s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtSubcollectionSubCollectionIdDeleteRequestConfig(contentType: kotlin.String, accept: kotlin.String, subCollectionId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/catalog/pvt/subcollection/{subCollectionId}".replace("{"+"subCollectionId"+"}", "$subCollectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SubCollection
    * Retrieves information about a SubCollection.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param subCollectionId Subcollection’s unique numerical identifier 
    * @return InlineResponse20018
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtSubcollectionSubCollectionIdGet(contentType: kotlin.String, accept: kotlin.String, subCollectionId: kotlin.Int) : InlineResponse20018 {
        val localVarResponse = apiCatalogPvtSubcollectionSubCollectionIdGetWithHttpInfo(contentType = contentType, accept = accept, subCollectionId = subCollectionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20018
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SubCollection
    * Retrieves information about a SubCollection.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param subCollectionId Subcollection’s unique numerical identifier 
    * @return ApiResponse<InlineResponse20018?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtSubcollectionSubCollectionIdGetWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, subCollectionId: kotlin.Int) : ApiResponse<InlineResponse20018?> {
        val localVariableConfig = apiCatalogPvtSubcollectionSubCollectionIdGetRequestConfig(contentType = contentType, accept = accept, subCollectionId = subCollectionId)

        return request<Unit, InlineResponse20018>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtSubcollectionSubCollectionIdGet
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param subCollectionId Subcollection’s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtSubcollectionSubCollectionIdGetRequestConfig(contentType: kotlin.String, accept: kotlin.String, subCollectionId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/subcollection/{subCollectionId}".replace("{"+"subCollectionId"+"}", "$subCollectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update SubCollection
    * Updates a previously SubCollection.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param subCollectionId Subcollection’s unique numerical identifier 
    * @param inlineObject13  (optional)
    * @return InlineResponse20018
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtSubcollectionSubCollectionIdPut(contentType: kotlin.String, accept: kotlin.String, subCollectionId: kotlin.Int, inlineObject13: InlineObject13?) : InlineResponse20018 {
        val localVarResponse = apiCatalogPvtSubcollectionSubCollectionIdPutWithHttpInfo(contentType = contentType, accept = accept, subCollectionId = subCollectionId, inlineObject13 = inlineObject13)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20018
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update SubCollection
    * Updates a previously SubCollection.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param subCollectionId Subcollection’s unique numerical identifier 
    * @param inlineObject13  (optional)
    * @return ApiResponse<InlineResponse20018?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtSubcollectionSubCollectionIdPutWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, subCollectionId: kotlin.Int, inlineObject13: InlineObject13?) : ApiResponse<InlineResponse20018?> {
        val localVariableConfig = apiCatalogPvtSubcollectionSubCollectionIdPutRequestConfig(contentType = contentType, accept = accept, subCollectionId = subCollectionId, inlineObject13 = inlineObject13)

        return request<InlineObject13, InlineResponse20018>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtSubcollectionSubCollectionIdPut
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param subCollectionId Subcollection’s unique numerical identifier 
    * @param inlineObject13  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtSubcollectionSubCollectionIdPutRequestConfig(contentType: kotlin.String, accept: kotlin.String, subCollectionId: kotlin.Int, inlineObject13: InlineObject13?) : RequestConfig<InlineObject13> {
        val localVariableBody = inlineObject13
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/catalog/pvt/subcollection/{subCollectionId}".replace("{"+"subCollectionId"+"}", "$subCollectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
