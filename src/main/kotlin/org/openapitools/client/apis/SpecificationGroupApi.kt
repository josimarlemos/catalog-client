/**
 * Catalog API
 *
 * Methods for collecting product/sku catalog data, categories, brands and other information. <br><br> All content that comes between {{}} keys must be replaced with the correct data before performing the request. <br><br> Common parameters that must be changed in most VTEX requests <br> {{accountName}} => Store account name <br> {{environment}} => The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta <br> {{X-VTEX-API-AppKey}} => Located in the headers of the requests, user authentication key <br> {{X-VTEX-API-AppToken}} => Located in the headers of the requests, authentication password
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.Example11
import org.openapitools.client.models.Example12
import org.openapitools.client.models.Example13
import org.openapitools.client.models.InlineResponse20021
import org.openapitools.client.models.RequestBody19
import org.openapitools.client.models.SpecificationGroupInsertRequest
import org.openapitools.client.models.SpecificationGroupUpdateRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SpecificationGroupApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://{accountName}.{environment}.com.br")
        }
    }

    /**
    * Update Specification Group
    * Update a specification group
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param groupId Group’s unique numerical identifier 
    * @param requestBody19  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtSpecificationgroupGroupIdPut(contentType: kotlin.String, accept: kotlin.String, groupId: kotlin.Int, requestBody19: RequestBody19?) : Unit {
        val localVarResponse = apiCatalogPvtSpecificationgroupGroupIdPutWithHttpInfo(contentType = contentType, accept = accept, groupId = groupId, requestBody19 = requestBody19)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update Specification Group
    * Update a specification group
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param groupId Group’s unique numerical identifier 
    * @param requestBody19  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtSpecificationgroupGroupIdPutWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, groupId: kotlin.Int, requestBody19: RequestBody19?) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtSpecificationgroupGroupIdPutRequestConfig(contentType = contentType, accept = accept, groupId = groupId, requestBody19 = requestBody19)

        return request<RequestBody19, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtSpecificationgroupGroupIdPut
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param groupId Group’s unique numerical identifier 
    * @param requestBody19  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtSpecificationgroupGroupIdPutRequestConfig(contentType: kotlin.String, accept: kotlin.String, groupId: kotlin.Int, requestBody19: RequestBody19?) : RequestConfig<RequestBody19> {
        val localVariableBody = requestBody19
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/catalog/pvt/specificationgroup/{groupId}".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create Specification Group
    * Create a specification group.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param specificationGroupInsertRequest  
    * @return Example13
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun specificationGroupInsert(contentType: kotlin.String, accept: kotlin.String, specificationGroupInsertRequest: SpecificationGroupInsertRequest) : Example13 {
        val localVarResponse = specificationGroupInsertWithHttpInfo(contentType = contentType, accept = accept, specificationGroupInsertRequest = specificationGroupInsertRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Example13
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create Specification Group
    * Create a specification group.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param specificationGroupInsertRequest  
    * @return ApiResponse<Example13?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun specificationGroupInsertWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, specificationGroupInsertRequest: SpecificationGroupInsertRequest) : ApiResponse<Example13?> {
        val localVariableConfig = specificationGroupInsertRequestConfig(contentType = contentType, accept = accept, specificationGroupInsertRequest = specificationGroupInsertRequest)

        return request<SpecificationGroupInsertRequest, Example13>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation specificationGroupInsert
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param specificationGroupInsertRequest  
    * @return RequestConfig
    */
    fun specificationGroupInsertRequestConfig(contentType: kotlin.String, accept: kotlin.String, specificationGroupInsertRequest: SpecificationGroupInsertRequest) : RequestConfig<SpecificationGroupInsertRequest> {
        val localVariableBody = specificationGroupInsertRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog_system/pvt/specification/group",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create Specification Group
    * Create a specification group.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param specificationGroupInsertRequest  
    * @return InlineResponse20021
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun specificationGroupInsert2(contentType: kotlin.String, accept: kotlin.String, specificationGroupInsertRequest: SpecificationGroupInsertRequest) : InlineResponse20021 {
        val localVarResponse = specificationGroupInsert2WithHttpInfo(contentType = contentType, accept = accept, specificationGroupInsertRequest = specificationGroupInsertRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20021
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create Specification Group
    * Create a specification group.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param specificationGroupInsertRequest  
    * @return ApiResponse<InlineResponse20021?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun specificationGroupInsert2WithHttpInfo(contentType: kotlin.String, accept: kotlin.String, specificationGroupInsertRequest: SpecificationGroupInsertRequest) : ApiResponse<InlineResponse20021?> {
        val localVariableConfig = specificationGroupInsert2RequestConfig(contentType = contentType, accept = accept, specificationGroupInsertRequest = specificationGroupInsertRequest)

        return request<SpecificationGroupInsertRequest, InlineResponse20021>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation specificationGroupInsert2
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param specificationGroupInsertRequest  
    * @return RequestConfig
    */
    fun specificationGroupInsert2RequestConfig(contentType: kotlin.String, accept: kotlin.String, specificationGroupInsertRequest: SpecificationGroupInsertRequest) : RequestConfig<SpecificationGroupInsertRequest> {
        val localVariableBody = specificationGroupInsertRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog/pvt/specificationgroup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update Specification Group
    * Update a specification group
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param specificationGroupUpdateRequest  
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun specificationGroupUpdate(contentType: kotlin.String, accept: kotlin.String, specificationGroupUpdateRequest: SpecificationGroupUpdateRequest) : Unit {
        val localVarResponse = specificationGroupUpdateWithHttpInfo(contentType = contentType, accept = accept, specificationGroupUpdateRequest = specificationGroupUpdateRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update Specification Group
    * Update a specification group
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param specificationGroupUpdateRequest  
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun specificationGroupUpdateWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, specificationGroupUpdateRequest: SpecificationGroupUpdateRequest) : ApiResponse<Unit?> {
        val localVariableConfig = specificationGroupUpdateRequestConfig(contentType = contentType, accept = accept, specificationGroupUpdateRequest = specificationGroupUpdateRequest)

        return request<SpecificationGroupUpdateRequest, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation specificationGroupUpdate
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param specificationGroupUpdateRequest  
    * @return RequestConfig
    */
    fun specificationGroupUpdateRequestConfig(contentType: kotlin.String, accept: kotlin.String, specificationGroupUpdateRequest: SpecificationGroupUpdateRequest) : RequestConfig<SpecificationGroupUpdateRequest> {
        val localVariableBody = specificationGroupUpdateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/catalog_system/pvt/specification/group",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Specifications Group
    * Retrieves details from a specification group by the ID of this group.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param groupId  
    * @return Example11
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun specificationsGroupGet(contentType: kotlin.String, accept: kotlin.String, groupId: kotlin.String) : Example11 {
        val localVarResponse = specificationsGroupGetWithHttpInfo(contentType = contentType, accept = accept, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Example11
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Specifications Group
    * Retrieves details from a specification group by the ID of this group.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param groupId  
    * @return ApiResponse<Example11?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun specificationsGroupGetWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, groupId: kotlin.String) : ApiResponse<Example11?> {
        val localVariableConfig = specificationsGroupGetRequestConfig(contentType = contentType, accept = accept, groupId = groupId)

        return request<Unit, Example11>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation specificationsGroupGet
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param groupId  
    * @return RequestConfig
    */
    fun specificationsGroupGetRequestConfig(contentType: kotlin.String, accept: kotlin.String, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pub/specification/groupGet/{groupId}".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    *  List Specifications Group by Category
    * Retrieves a list of specification groups by the category ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId  
    * @return kotlin.collections.List<Example12>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun specificationsGroupListbyCategory(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.String) : kotlin.collections.List<Example12> {
        val localVarResponse = specificationsGroupListbyCategoryWithHttpInfo(contentType = contentType, accept = accept, categoryId = categoryId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Example12>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    *  List Specifications Group by Category
    * Retrieves a list of specification groups by the category ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId  
    * @return ApiResponse<kotlin.collections.List<Example12>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun specificationsGroupListbyCategoryWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.String) : ApiResponse<kotlin.collections.List<Example12>?> {
        val localVariableConfig = specificationsGroupListbyCategoryRequestConfig(contentType = contentType, accept = accept, categoryId = categoryId)

        return request<Unit, kotlin.collections.List<Example12>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation specificationsGroupListbyCategory
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param categoryId  
    * @return RequestConfig
    */
    fun specificationsGroupListbyCategoryRequestConfig(contentType: kotlin.String, accept: kotlin.String, categoryId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/specification/groupbycategory/{categoryId}".replace("{"+"categoryId"+"}", "$categoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
