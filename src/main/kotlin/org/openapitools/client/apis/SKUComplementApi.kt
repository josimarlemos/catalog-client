/**
 * Catalog API
 *
 * Methods for collecting product/sku catalog data, categories, brands and other information. <br><br> All content that comes between {{}} keys must be replaced with the correct data before performing the request. <br><br> Common parameters that must be changed in most VTEX requests <br> {{accountName}} => Store account name <br> {{environment}} => The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta <br> {{X-VTEX-API-AppKey}} => Located in the headers of the requests, user authentication key <br> {{X-VTEX-API-AppToken}} => Located in the headers of the requests, authentication password
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.InlineResponse20011
import org.openapitools.client.models.RequestBody
import org.openapitools.client.models.RequestBody1

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SKUComplementApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://{accountName}.{environment}.com.br")
        }
    }

    /**
    * Create SKU Complement
    * Creates a new SKU Complement on a Parent SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param requestBody  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createSKUComplement(contentType: kotlin.String, accept: kotlin.String, requestBody: RequestBody?) : Unit {
        val localVarResponse = createSKUComplementWithHttpInfo(contentType = contentType, accept = accept, requestBody = requestBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create SKU Complement
    * Creates a new SKU Complement on a Parent SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param requestBody  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun createSKUComplementWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, requestBody: RequestBody?) : ApiResponse<Unit?> {
        val localVariableConfig = createSKUComplementRequestConfig(contentType = contentType, accept = accept, requestBody = requestBody)

        return request<RequestBody, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createSKUComplement
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param requestBody  (optional)
    * @return RequestConfig
    */
    fun createSKUComplementRequestConfig(contentType: kotlin.String, accept: kotlin.String, requestBody: RequestBody?) : RequestConfig<RequestBody> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog/pvt/skucomplement",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete SKU Complement by SKU Complement ID
    * Deletes a previously existing Complement of an SKU by SKU Complement ID
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuComplementId  SKU Complement’s unique numerical identifier 
    * @param requestBody1  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteSKUComplementbySKUComplementID(contentType: kotlin.String, accept: kotlin.String, skuComplementId: kotlin.Int, requestBody1: RequestBody1?) : Unit {
        val localVarResponse = deleteSKUComplementbySKUComplementIDWithHttpInfo(contentType = contentType, accept = accept, skuComplementId = skuComplementId, requestBody1 = requestBody1)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete SKU Complement by SKU Complement ID
    * Deletes a previously existing Complement of an SKU by SKU Complement ID
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuComplementId  SKU Complement’s unique numerical identifier 
    * @param requestBody1  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteSKUComplementbySKUComplementIDWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuComplementId: kotlin.Int, requestBody1: RequestBody1?) : ApiResponse<Unit?> {
        val localVariableConfig = deleteSKUComplementbySKUComplementIDRequestConfig(contentType = contentType, accept = accept, skuComplementId = skuComplementId, requestBody1 = requestBody1)

        return request<RequestBody1, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteSKUComplementbySKUComplementID
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuComplementId  SKU Complement’s unique numerical identifier 
    * @param requestBody1  (optional)
    * @return RequestConfig
    */
    fun deleteSKUComplementbySKUComplementIDRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuComplementId: kotlin.Int, requestBody1: RequestBody1?) : RequestConfig<RequestBody1> {
        val localVariableBody = requestBody1
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/catalog/pvt/skucomplement/{skuComplementId}".replace("{"+"skuComplementId"+"}", "$skuComplementId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SKU Complement by SKU Complement ID
    * Retrieves a existing Complement of an SKU by its SKU Complement ID
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuComplementId  SKU Complement’s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSKUComplementbySKUComplementID(contentType: kotlin.String, accept: kotlin.String, skuComplementId: kotlin.Int) : Unit {
        val localVarResponse = getSKUComplementbySKUComplementIDWithHttpInfo(contentType = contentType, accept = accept, skuComplementId = skuComplementId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU Complement by SKU Complement ID
    * Retrieves a existing Complement of an SKU by its SKU Complement ID
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuComplementId  SKU Complement’s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun getSKUComplementbySKUComplementIDWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuComplementId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = getSKUComplementbySKUComplementIDRequestConfig(contentType = contentType, accept = accept, skuComplementId = skuComplementId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getSKUComplementbySKUComplementID
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuComplementId  SKU Complement’s unique numerical identifier 
    * @return RequestConfig
    */
    fun getSKUComplementbySKUComplementIDRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuComplementId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/skucomplement/{skuComplementId}".replace("{"+"skuComplementId"+"}", "$skuComplementId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SKU Complement by SKU ID
    * Retrieves a existing Complement of an SKU by its SKU ID
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId  SKU’s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSKUComplementbySKUID(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : Unit {
        val localVarResponse = getSKUComplementbySKUIDWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU Complement by SKU ID
    * Retrieves a existing Complement of an SKU by its SKU ID
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId  SKU’s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun getSKUComplementbySKUIDWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = getSKUComplementbySKUIDRequestConfig(contentType = contentType, accept = accept, skuId = skuId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getSKUComplementbySKUID
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId  SKU’s unique numerical identifier 
    * @return RequestConfig
    */
    fun getSKUComplementbySKUIDRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/stockkeepingunit/{skuId}/complement".replace("{"+"skuId"+"}", "$skuId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SKU Complements by Complement Type ID
    * Retrieves all the existing SKU Complements with the same Complement Type ID of a specific SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId  SKU’s unique numerical identifier 
    * @param complementTypeId  Type of the complement you are inserting on the SKU. The possible values are: &#x60;1&#x60; to *assessor*; &#x60;2&#x60; to *suggestion*; &#x60;3&#x60; to *similar*; 5 to *show together*. 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSKUComplementsbyComplementTypeID(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, complementTypeId: kotlin.Int) : Unit {
        val localVarResponse = getSKUComplementsbyComplementTypeIDWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId, complementTypeId = complementTypeId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU Complements by Complement Type ID
    * Retrieves all the existing SKU Complements with the same Complement Type ID of a specific SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId  SKU’s unique numerical identifier 
    * @param complementTypeId  Type of the complement you are inserting on the SKU. The possible values are: &#x60;1&#x60; to *assessor*; &#x60;2&#x60; to *suggestion*; &#x60;3&#x60; to *similar*; 5 to *show together*. 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun getSKUComplementsbyComplementTypeIDWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, complementTypeId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = getSKUComplementsbyComplementTypeIDRequestConfig(contentType = contentType, accept = accept, skuId = skuId, complementTypeId = complementTypeId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getSKUComplementsbyComplementTypeID
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId  SKU’s unique numerical identifier 
    * @param complementTypeId  Type of the complement you are inserting on the SKU. The possible values are: &#x60;1&#x60; to *assessor*; &#x60;2&#x60; to *suggestion*; &#x60;3&#x60; to *similar*; 5 to *show together*. 
    * @return RequestConfig
    */
    fun getSKUComplementsbyComplementTypeIDRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, complementTypeId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/stockkeepingunit/{skuId}/complement/{complementTypeId}".replace("{"+"skuId"+"}", "$skuId").replace("{"+"complementTypeId"+"}", "$complementTypeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SKU complements by type
    * Retrieves all the existing SKU complements with the same complement type ID of a specific SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId  SKU’s unique numerical identifier 
    * @param type  Type of the complement you are inserting on the SKU. The possible values are: &#x60;1&#x60; to *assessor*; &#x60;2&#x60; to *suggestion*; &#x60;3&#x60; to *similar*; 5 to *show together*. 
    * @return InlineResponse20011
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSKUcomplementsbytype(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, type: kotlin.Int) : InlineResponse20011 {
        val localVarResponse = getSKUcomplementsbytypeWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId, type = type)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20011
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU complements by type
    * Retrieves all the existing SKU complements with the same complement type ID of a specific SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId  SKU’s unique numerical identifier 
    * @param type  Type of the complement you are inserting on the SKU. The possible values are: &#x60;1&#x60; to *assessor*; &#x60;2&#x60; to *suggestion*; &#x60;3&#x60; to *similar*; 5 to *show together*. 
    * @return ApiResponse<InlineResponse20011?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSKUcomplementsbytypeWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, type: kotlin.Int) : ApiResponse<InlineResponse20011?> {
        val localVariableConfig = getSKUcomplementsbytypeRequestConfig(contentType = contentType, accept = accept, skuId = skuId, type = type)

        return request<Unit, InlineResponse20011>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getSKUcomplementsbytype
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId  SKU’s unique numerical identifier 
    * @param type  Type of the complement you are inserting on the SKU. The possible values are: &#x60;1&#x60; to *assessor*; &#x60;2&#x60; to *suggestion*; &#x60;3&#x60; to *similar*; 5 to *show together*. 
    * @return RequestConfig
    */
    fun getSKUcomplementsbytypeRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, type: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/sku/complements/{skuId}/{type}".replace("{"+"skuId"+"}", "$skuId").replace("{"+"type"+"}", "$type"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
