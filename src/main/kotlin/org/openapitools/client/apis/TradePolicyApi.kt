/**
 * Catalog API
 *
 * Methods for collecting product/sku catalog data, categories, brands and other information. <br><br> All content that comes between {{}} keys must be replaced with the correct data before performing the request. <br><br> Common parameters that must be changed in most VTEX requests <br> {{accountName}} => Store account name <br> {{environment}} => The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta <br> {{X-VTEX-API-AppKey}} => Located in the headers of the requests, user authentication key <br> {{X-VTEX-API-AppToken}} => Located in the headers of the requests, authentication password
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException


import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class TradePolicyApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://{accountName}.{environment}.com.br")
        }
    }

    /**
    * Get Trade Policy by Product ID
    * Retrieves a Trade Policy associated to a Product by its ID
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtProductProductIdSalespolicyGet(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtProductProductIdSalespolicyGetWithHttpInfo(contentType = contentType, accept = accept, productId = productId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get Trade Policy by Product ID
    * Retrieves a Trade Policy associated to a Product by its ID
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtProductProductIdSalespolicyGetWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtProductProductIdSalespolicyGetRequestConfig(contentType = contentType, accept = accept, productId = productId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtProductProductIdSalespolicyGet
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtProductProductIdSalespolicyGetRequestConfig(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/product/{productId}/salespolicy".replace("{"+"productId"+"}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete Product to Trade Policy
    * Disassociates a Trade Policy to a Product
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @param tradepolicyId Trade Policy’s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtProductProductIdSalespolicyTradepolicyIdDelete(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int, tradepolicyId: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtProductProductIdSalespolicyTradepolicyIdDeleteWithHttpInfo(contentType = contentType, accept = accept, productId = productId, tradepolicyId = tradepolicyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete Product to Trade Policy
    * Disassociates a Trade Policy to a Product
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @param tradepolicyId Trade Policy’s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtProductProductIdSalespolicyTradepolicyIdDeleteWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int, tradepolicyId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtProductProductIdSalespolicyTradepolicyIdDeleteRequestConfig(contentType = contentType, accept = accept, productId = productId, tradepolicyId = tradepolicyId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtProductProductIdSalespolicyTradepolicyIdDelete
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @param tradepolicyId Trade Policy’s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtProductProductIdSalespolicyTradepolicyIdDeleteRequestConfig(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int, tradepolicyId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/catalog/pvt/product/{productId}/salespolicy/{tradepolicyId}".replace("{"+"productId"+"}", "$productId").replace("{"+"tradepolicyId"+"}", "$tradepolicyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create Product to Trade Policy
    * Associates a existing Trade Policy with a Product
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @param tradepolicyId Trade Policy’s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtProductProductIdSalespolicyTradepolicyIdPost(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int, tradepolicyId: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtProductProductIdSalespolicyTradepolicyIdPostWithHttpInfo(contentType = contentType, accept = accept, productId = productId, tradepolicyId = tradepolicyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create Product to Trade Policy
    * Associates a existing Trade Policy with a Product
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @param tradepolicyId Trade Policy’s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtProductProductIdSalespolicyTradepolicyIdPostWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int, tradepolicyId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtProductProductIdSalespolicyTradepolicyIdPostRequestConfig(contentType = contentType, accept = accept, productId = productId, tradepolicyId = tradepolicyId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtProductProductIdSalespolicyTradepolicyIdPost
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @param tradepolicyId Trade Policy’s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtProductProductIdSalespolicyTradepolicyIdPostRequestConfig(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.Int, tradepolicyId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog/pvt/product/{productId}/salespolicy/{tradepolicyId}".replace("{"+"productId"+"}", "$productId").replace("{"+"tradepolicyId"+"}", "$tradepolicyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List all SKUs of a Trade Policy
    * Retrieves a list of SKU IDs of one Trade Policy
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param sc Trade Policy’s unique numerical identifier 
    * @param page Page number (optional, default to 1)
    * @param pageSize Number of the items of the page (optional, default to 1)
    * @param onlyAssigned If set as &#x60;false&#x60;, it allows user to decide if the SKUs that are not assigned to a specific trade policy should be also returned (optional, default to true)
    * @return kotlin.collections.List<kotlin.Int>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogSystemPvtSkuStockkeepingunitidsbysaleschannelGet(contentType: kotlin.String, accept: kotlin.String, sc: kotlin.Int, page: kotlin.Int?, pageSize: kotlin.Int?, onlyAssigned: kotlin.Boolean?) : kotlin.collections.List<kotlin.Int> {
        val localVarResponse = apiCatalogSystemPvtSkuStockkeepingunitidsbysaleschannelGetWithHttpInfo(contentType = contentType, accept = accept, sc = sc, page = page, pageSize = pageSize, onlyAssigned = onlyAssigned)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.Int>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List all SKUs of a Trade Policy
    * Retrieves a list of SKU IDs of one Trade Policy
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param sc Trade Policy’s unique numerical identifier 
    * @param page Page number (optional, default to 1)
    * @param pageSize Number of the items of the page (optional, default to 1)
    * @param onlyAssigned If set as &#x60;false&#x60;, it allows user to decide if the SKUs that are not assigned to a specific trade policy should be also returned (optional, default to true)
    * @return ApiResponse<kotlin.collections.List<kotlin.Int>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogSystemPvtSkuStockkeepingunitidsbysaleschannelGetWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, sc: kotlin.Int, page: kotlin.Int?, pageSize: kotlin.Int?, onlyAssigned: kotlin.Boolean?) : ApiResponse<kotlin.collections.List<kotlin.Int>?> {
        val localVariableConfig = apiCatalogSystemPvtSkuStockkeepingunitidsbysaleschannelGetRequestConfig(contentType = contentType, accept = accept, sc = sc, page = page, pageSize = pageSize, onlyAssigned = onlyAssigned)

        return request<Unit, kotlin.collections.List<kotlin.Int>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogSystemPvtSkuStockkeepingunitidsbysaleschannelGet
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param sc Trade Policy’s unique numerical identifier 
    * @param page Page number (optional, default to 1)
    * @param pageSize Number of the items of the page (optional, default to 1)
    * @param onlyAssigned If set as &#x60;false&#x60;, it allows user to decide if the SKUs that are not assigned to a specific trade policy should be also returned (optional, default to true)
    * @return RequestConfig
    */
    fun apiCatalogSystemPvtSkuStockkeepingunitidsbysaleschannelGetRequestConfig(contentType: kotlin.String, accept: kotlin.String, sc: kotlin.Int, page: kotlin.Int?, pageSize: kotlin.Int?, onlyAssigned: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("sc", listOf(sc.toString()))
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
                if (onlyAssigned != null) {
                    put("onlyAssigned", listOf(onlyAssigned.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/sku/stockkeepingunitidsbysaleschannel",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
