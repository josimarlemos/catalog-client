/**
 * Catalog API
 *
 * Methods for collecting product/sku catalog data, categories, brands and other information. <br><br> All content that comes between {{}} keys must be replaced with the correct data before performing the request. <br><br> Common parameters that must be changed in most VTEX requests <br> {{accountName}} => Store account name <br> {{environment}} => The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta <br> {{X-VTEX-API-AppKey}} => Located in the headers of the requests, user authentication key <br> {{X-VTEX-API-AppToken}} => Located in the headers of the requests, authentication password
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.AssociateattachmentstoSKURequest
import org.openapitools.client.models.RequestBody2
import org.openapitools.client.models.RequestBody3

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SKUAttachmentApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://{accountName}.{environment}.com.br")
        }
    }

    /**
    * Dissociate attachments and SKUs
    * Dissociates attachments and SKUs based on an SKU ID or an attachment ID.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU ID. By using this query param, you can dissociate all the attachments from an SKU based on its SKU ID. (optional)
    * @param attachmentId Attachment ID. By using this query param, you can dissociate the given attachment from all previously associated SKUs. (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtSkuattachmentDelete(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int?, attachmentId: kotlin.Int?) : Unit {
        val localVarResponse = apiCatalogPvtSkuattachmentDeleteWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId, attachmentId = attachmentId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Dissociate attachments and SKUs
    * Dissociates attachments and SKUs based on an SKU ID or an attachment ID.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU ID. By using this query param, you can dissociate all the attachments from an SKU based on its SKU ID. (optional)
    * @param attachmentId Attachment ID. By using this query param, you can dissociate the given attachment from all previously associated SKUs. (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtSkuattachmentDeleteWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int?, attachmentId: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtSkuattachmentDeleteRequestConfig(contentType = contentType, accept = accept, skuId = skuId, attachmentId = attachmentId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtSkuattachmentDelete
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU ID. By using this query param, you can dissociate all the attachments from an SKU based on its SKU ID. (optional)
    * @param attachmentId Attachment ID. By using this query param, you can dissociate the given attachment from all previously associated SKUs. (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtSkuattachmentDeleteRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int?, attachmentId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (skuId != null) {
                    put("skuId", listOf(skuId.toString()))
                }
                if (attachmentId != null) {
                    put("attachmentId", listOf(attachmentId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/catalog/pvt/skuattachment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Associate SKU Attachment
    * Associates an existing SKU to an existing Attachment
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param requestBody2  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtSkuattachmentPost(contentType: kotlin.String, accept: kotlin.String, requestBody2: RequestBody2?) : Unit {
        val localVarResponse = apiCatalogPvtSkuattachmentPostWithHttpInfo(contentType = contentType, accept = accept, requestBody2 = requestBody2)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Associate SKU Attachment
    * Associates an existing SKU to an existing Attachment
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param requestBody2  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtSkuattachmentPostWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, requestBody2: RequestBody2?) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtSkuattachmentPostRequestConfig(contentType = contentType, accept = accept, requestBody2 = requestBody2)

        return request<RequestBody2, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtSkuattachmentPost
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param requestBody2  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtSkuattachmentPostRequestConfig(contentType: kotlin.String, accept: kotlin.String, requestBody2: RequestBody2?) : RequestConfig<RequestBody2> {
        val localVariableBody = requestBody2
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog/pvt/skuattachment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete SKU Attachment by SKU Attachment Association ID
    * Deletes an association of an SKU to an Attachment
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuAttachmentAssociationId ID of the association between the attachment and the SKU, which corresponds to the &#x60;Id&#x60; in the response body of the [Associate SKU Attachment](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-post-sku-attachment) and the [Get SKU Attachment by SKU ID](https://developers.vtex.com/vtex-rest-api/reference/get_api-catalog-pvt-stockkeepingunit-skuid-attachment) endpoints. 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtSkuattachmentSkuAttachmentAssociationIdDelete(contentType: kotlin.String, accept: kotlin.String, skuAttachmentAssociationId: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtSkuattachmentSkuAttachmentAssociationIdDeleteWithHttpInfo(contentType = contentType, accept = accept, skuAttachmentAssociationId = skuAttachmentAssociationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete SKU Attachment by SKU Attachment Association ID
    * Deletes an association of an SKU to an Attachment
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuAttachmentAssociationId ID of the association between the attachment and the SKU, which corresponds to the &#x60;Id&#x60; in the response body of the [Associate SKU Attachment](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-post-sku-attachment) and the [Get SKU Attachment by SKU ID](https://developers.vtex.com/vtex-rest-api/reference/get_api-catalog-pvt-stockkeepingunit-skuid-attachment) endpoints. 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtSkuattachmentSkuAttachmentAssociationIdDeleteWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuAttachmentAssociationId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtSkuattachmentSkuAttachmentAssociationIdDeleteRequestConfig(contentType = contentType, accept = accept, skuAttachmentAssociationId = skuAttachmentAssociationId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtSkuattachmentSkuAttachmentAssociationIdDelete
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuAttachmentAssociationId ID of the association between the attachment and the SKU, which corresponds to the &#x60;Id&#x60; in the response body of the [Associate SKU Attachment](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-post-sku-attachment) and the [Get SKU Attachment by SKU ID](https://developers.vtex.com/vtex-rest-api/reference/get_api-catalog-pvt-stockkeepingunit-skuid-attachment) endpoints. 
    * @return RequestConfig
    */
    fun apiCatalogPvtSkuattachmentSkuAttachmentAssociationIdDeleteRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuAttachmentAssociationId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/catalog/pvt/skuattachment/{skuAttachmentAssociationId}".replace("{"+"skuAttachmentAssociationId"+"}", "$skuAttachmentAssociationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete SKU Complement
    * Deletes a previously existing Complement of an SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuAttachmentId Attachment’s unique numerical identifier 
    * @param requestBody3  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtSkuattachmentSkuAttachmentIdDelete(contentType: kotlin.String, accept: kotlin.String, skuAttachmentId: kotlin.Int, requestBody3: RequestBody3?) : Unit {
        val localVarResponse = apiCatalogPvtSkuattachmentSkuAttachmentIdDeleteWithHttpInfo(contentType = contentType, accept = accept, skuAttachmentId = skuAttachmentId, requestBody3 = requestBody3)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete SKU Complement
    * Deletes a previously existing Complement of an SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuAttachmentId Attachment’s unique numerical identifier 
    * @param requestBody3  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtSkuattachmentSkuAttachmentIdDeleteWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuAttachmentId: kotlin.Int, requestBody3: RequestBody3?) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtSkuattachmentSkuAttachmentIdDeleteRequestConfig(contentType = contentType, accept = accept, skuAttachmentId = skuAttachmentId, requestBody3 = requestBody3)

        return request<RequestBody3, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtSkuattachmentSkuAttachmentIdDelete
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuAttachmentId Attachment’s unique numerical identifier 
    * @param requestBody3  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtSkuattachmentSkuAttachmentIdDeleteRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuAttachmentId: kotlin.Int, requestBody3: RequestBody3?) : RequestConfig<RequestBody3> {
        val localVariableBody = requestBody3
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/catalog/pvt/skuattachment/{skuAttachmentId}".replace("{"+"skuAttachmentId"+"}", "$skuAttachmentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SKU Attachment by SKU ID
    * Retrieves an existing SKU Attachment from a SKU by its ID.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU unique identifier. 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdAttachmentGet(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtStockkeepingunitSkuIdAttachmentGetWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU Attachment by SKU ID
    * Retrieves an existing SKU Attachment from a SKU by its ID.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU unique identifier. 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdAttachmentGetWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitSkuIdAttachmentGetRequestConfig(contentType = contentType, accept = accept, skuId = skuId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitSkuIdAttachmentGet
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU unique identifier. 
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitSkuIdAttachmentGetRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/stockkeepingunit/{skuId}/attachment".replace("{"+"skuId"+"}", "$skuId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Associate attachments to SKU
    * Amplifies a cart data by associating attachments to SKUs.  This request removes existing SKU attachment associations and recreates the associations with the attachments being sent.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param associateattachmentstoSKURequest  
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun associateattachmentstoSKU(contentType: kotlin.String, accept: kotlin.String, associateattachmentstoSKURequest: AssociateattachmentstoSKURequest) : Unit {
        val localVarResponse = associateattachmentstoSKUWithHttpInfo(contentType = contentType, accept = accept, associateattachmentstoSKURequest = associateattachmentstoSKURequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Associate attachments to SKU
    * Amplifies a cart data by associating attachments to SKUs.  This request removes existing SKU attachment associations and recreates the associations with the attachments being sent.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param associateattachmentstoSKURequest  
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun associateattachmentstoSKUWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, associateattachmentstoSKURequest: AssociateattachmentstoSKURequest) : ApiResponse<Unit?> {
        val localVariableConfig = associateattachmentstoSKURequestConfig(contentType = contentType, accept = accept, associateattachmentstoSKURequest = associateattachmentstoSKURequest)

        return request<AssociateattachmentstoSKURequest, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation associateattachmentstoSKU
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param associateattachmentstoSKURequest  
    * @return RequestConfig
    */
    fun associateattachmentstoSKURequestConfig(contentType: kotlin.String, accept: kotlin.String, associateattachmentstoSKURequest: AssociateattachmentstoSKURequest) : RequestConfig<AssociateattachmentstoSKURequest> {
        val localVariableBody = associateattachmentstoSKURequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog_system/pvt/sku/associateattachments",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
