/**
 * Catalog API
 *
 * Methods for collecting product/sku catalog data, categories, brands and other information. <br><br> All content that comes between {{}} keys must be replaced with the correct data before performing the request. <br><br> Common parameters that must be changed in most VTEX requests <br> {{accountName}} => Store account name <br> {{environment}} => The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta <br> {{X-VTEX-API-AppKey}} => Located in the headers of the requests, user authentication key <br> {{X-VTEX-API-AppToken}} => Located in the headers of the requests, authentication password
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.InlineResponse20012
import org.openapitools.client.models.SKUFileURL

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SKUFileApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://{accountName}.{environment}.com.br")
        }
    }

    /**
    * Copy All Files from an SKU to other SKU
    * Copy all existing files from an SKU to other SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuIdfrom SKU’s unique numerical identifier __Origin__ 
    * @param skuIdto SKU’s unique numerical identifier __Destiny__ 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePut(contentType: kotlin.String, accept: kotlin.String, skuIdfrom: kotlin.Int, skuIdto: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePutWithHttpInfo(contentType = contentType, accept = accept, skuIdfrom = skuIdfrom, skuIdto = skuIdto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Copy All Files from an SKU to other SKU
    * Copy all existing files from an SKU to other SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuIdfrom SKU’s unique numerical identifier __Origin__ 
    * @param skuIdto SKU’s unique numerical identifier __Destiny__ 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePutWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuIdfrom: kotlin.Int, skuIdto: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePutRequestConfig(contentType = contentType, accept = accept, skuIdfrom = skuIdfrom, skuIdto = skuIdto)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePut
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuIdfrom SKU’s unique numerical identifier __Origin__ 
    * @param skuIdto SKU’s unique numerical identifier __Destiny__ 
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitCopySkuIdfromSkuIdtoFilePutRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuIdfrom: kotlin.Int, skuIdto: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/catalog/pvt/stockkeepingunit/copy/{skuIdfrom}/{skuIdto}/file/".replace("{"+"skuIdfrom"+"}", "$skuIdfrom").replace("{"+"skuIdto"+"}", "$skuIdto"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Disassociate SKU File
    * Disassociates an SKU File from an SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skuFileId SKU File&#39;s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitDisassociateSkuIdFileSkuFileIdDelete(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skuFileId: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtStockkeepingunitDisassociateSkuIdFileSkuFileIdDeleteWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId, skuFileId = skuFileId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Disassociate SKU File
    * Disassociates an SKU File from an SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skuFileId SKU File&#39;s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitDisassociateSkuIdFileSkuFileIdDeleteWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skuFileId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitDisassociateSkuIdFileSkuFileIdDeleteRequestConfig(contentType = contentType, accept = accept, skuId = skuId, skuFileId = skuFileId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitDisassociateSkuIdFileSkuFileIdDelete
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skuFileId SKU File&#39;s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitDisassociateSkuIdFileSkuFileIdDeleteRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skuFileId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/catalog/pvt/stockkeepingunit/disassociate/{skuId}/file/{skuFileId}".replace("{"+"skuId"+"}", "$skuId").replace("{"+"skuFileId"+"}", "$skuFileId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete All SKU File
    * Deletes all SKU Image Files
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdFileDelete(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtStockkeepingunitSkuIdFileDeleteWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete All SKU File
    * Deletes all SKU Image Files
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdFileDeleteWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitSkuIdFileDeleteRequestConfig(contentType = contentType, accept = accept, skuId = skuId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitSkuIdFileDelete
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitSkuIdFileDeleteRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/catalog/pvt/stockkeepingunit/{skuId}/file".replace("{"+"skuId"+"}", "$skuId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SKU File
    * Gets general information about all Files inside the SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdFileGet(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtStockkeepingunitSkuIdFileGetWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU File
    * Gets general information about all Files inside the SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdFileGetWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitSkuIdFileGetRequestConfig(contentType = contentType, accept = accept, skuId = skuId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitSkuIdFileGet
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitSkuIdFileGetRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/stockkeepingunit/{skuId}/file".replace("{"+"skuId"+"}", "$skuId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create SKU File
    * Creates a new Image on an SKU based on its URL or on a form-data request body
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skUFileURL  (optional)
    * @return InlineResponse20012
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdFilePost(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skUFileURL: SKUFileURL?) : InlineResponse20012 {
        val localVarResponse = apiCatalogPvtStockkeepingunitSkuIdFilePostWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId, skUFileURL = skUFileURL)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20012
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create SKU File
    * Creates a new Image on an SKU based on its URL or on a form-data request body
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skUFileURL  (optional)
    * @return ApiResponse<InlineResponse20012?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdFilePostWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skUFileURL: SKUFileURL?) : ApiResponse<InlineResponse20012?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitSkuIdFilePostRequestConfig(contentType = contentType, accept = accept, skuId = skuId, skUFileURL = skUFileURL)

        return request<SKUFileURL, InlineResponse20012>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitSkuIdFilePost
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skUFileURL  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitSkuIdFilePostRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skUFileURL: SKUFileURL?) : RequestConfig<SKUFileURL> {
        val localVariableBody = skUFileURL
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog/pvt/stockkeepingunit/{skuId}/file".replace("{"+"skuId"+"}", "$skuId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete SKU Image by File ID
    * Deletes a specific SKU Image File
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skuFileId SKU File’s unique numerical identifier 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdDelete(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skuFileId: kotlin.Int) : Unit {
        val localVarResponse = apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdDeleteWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId, skuFileId = skuFileId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete SKU Image by File ID
    * Deletes a specific SKU Image File
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skuFileId SKU File’s unique numerical identifier 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdDeleteWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skuFileId: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdDeleteRequestConfig(contentType = contentType, accept = accept, skuId = skuId, skuFileId = skuFileId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdDelete
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skuFileId SKU File’s unique numerical identifier 
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdDeleteRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skuFileId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/catalog/pvt/stockkeepingunit/{skuId}/file/{skuFileId}".replace("{"+"skuId"+"}", "$skuId").replace("{"+"skuFileId"+"}", "$skuFileId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update SKU File
    * Updates a new Image on an SKU based on its URL or on a form-data request body.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skuFileId ID of the association of the SKU and the image, which can be obtained by placing a request to the [Get SKU File](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-get-sku-file) endpoint and copying the &#x60;Id&#x60; field. 
    * @param skUFileURL  (optional)
    * @return InlineResponse20012
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdPut(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skuFileId: kotlin.Int, skUFileURL: SKUFileURL?) : InlineResponse20012 {
        val localVarResponse = apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdPutWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId, skuFileId = skuFileId, skUFileURL = skUFileURL)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20012
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update SKU File
    * Updates a new Image on an SKU based on its URL or on a form-data request body.
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skuFileId ID of the association of the SKU and the image, which can be obtained by placing a request to the [Get SKU File](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-get-sku-file) endpoint and copying the &#x60;Id&#x60; field. 
    * @param skUFileURL  (optional)
    * @return ApiResponse<InlineResponse20012?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdPutWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skuFileId: kotlin.Int, skUFileURL: SKUFileURL?) : ApiResponse<InlineResponse20012?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdPutRequestConfig(contentType = contentType, accept = accept, skuId = skuId, skuFileId = skuFileId, skUFileURL = skUFileURL)

        return request<SKUFileURL, InlineResponse20012>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdPut
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param skuFileId ID of the association of the SKU and the image, which can be obtained by placing a request to the [Get SKU File](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-get-sku-file) endpoint and copying the &#x60;Id&#x60; field. 
    * @param skUFileURL  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitSkuIdFileSkuFileIdPutRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, skuFileId: kotlin.Int, skUFileURL: SKUFileURL?) : RequestConfig<SKUFileURL> {
        val localVariableBody = skUFileURL
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/catalog/pvt/stockkeepingunit/{skuId}/file/{skuFileId}".replace("{"+"skuId"+"}", "$skuId").replace("{"+"skuFileId"+"}", "$skuFileId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
