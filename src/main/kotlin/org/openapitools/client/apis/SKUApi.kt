/**
 * Catalog API
 *
 * Methods for collecting product/sku catalog data, categories, brands and other information. <br><br> All content that comes between {{}} keys must be replaced with the correct data before performing the request. <br><br> Common parameters that must be changed in most VTEX requests <br> {{accountName}} => Store account name <br> {{environment}} => The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta <br> {{X-VTEX-API-AppKey}} => Located in the headers of the requests, user authentication key <br> {{X-VTEX-API-AppToken}} => Located in the headers of the requests, authentication password
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.Example4
import org.openapitools.client.models.Example5
import org.openapitools.client.models.Example7
import org.openapitools.client.models.Example8
import org.openapitools.client.models.InlineObject4
import org.openapitools.client.models.InlineObject5
import org.openapitools.client.models.InlineResponse20010
import org.openapitools.client.models.InlineResponse2008
import org.openapitools.client.models.InlineResponse2009

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SKUApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://{accountName}.{environment}.com.br")
        }
    }

    /**
    * Get SKU by RefId
    * Retrieves information about a specific SKU by its RefId
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param refId SKU reference ID 
    * @return InlineResponse2008
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitGet(contentType: kotlin.String, accept: kotlin.String, refId: kotlin.String) : InlineResponse2008 {
        val localVarResponse = apiCatalogPvtStockkeepingunitGetWithHttpInfo(contentType = contentType, accept = accept, refId = refId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU by RefId
    * Retrieves information about a specific SKU by its RefId
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param refId SKU reference ID 
    * @return ApiResponse<InlineResponse2008?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitGetWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, refId: kotlin.String) : ApiResponse<InlineResponse2008?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitGetRequestConfig(contentType = contentType, accept = accept, refId = refId)

        return request<Unit, InlineResponse2008>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitGet
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param refId SKU reference ID 
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitGetRequestConfig(contentType: kotlin.String, accept: kotlin.String, refId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("refId", listOf(refId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/stockkeepingunit",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create SKU
    * Creates a new SKU from scratch
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject4  (optional)
    * @return InlineResponse2009
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitPost(contentType: kotlin.String, accept: kotlin.String, inlineObject4: InlineObject4?) : InlineResponse2009 {
        val localVarResponse = apiCatalogPvtStockkeepingunitPostWithHttpInfo(contentType = contentType, accept = accept, inlineObject4 = inlineObject4)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2009
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create SKU
    * Creates a new SKU from scratch
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject4  (optional)
    * @return ApiResponse<InlineResponse2009?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitPostWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, inlineObject4: InlineObject4?) : ApiResponse<InlineResponse2009?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitPostRequestConfig(contentType = contentType, accept = accept, inlineObject4 = inlineObject4)

        return request<InlineObject4, InlineResponse2009>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitPost
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param inlineObject4  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitPostRequestConfig(contentType: kotlin.String, accept: kotlin.String, inlineObject4: InlineObject4?) : RequestConfig<InlineObject4> {
        val localVariableBody = inlineObject4
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog/pvt/stockkeepingunit",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update SKU
    * Updates an existing SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param inlineObject5  (optional)
    * @return InlineResponse20010
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdPut(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, inlineObject5: InlineObject5?) : InlineResponse20010 {
        val localVarResponse = apiCatalogPvtStockkeepingunitSkuIdPutWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId, inlineObject5 = inlineObject5)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20010
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update SKU
    * Updates an existing SKU
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param inlineObject5  (optional)
    * @return ApiResponse<InlineResponse20010?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCatalogPvtStockkeepingunitSkuIdPutWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, inlineObject5: InlineObject5?) : ApiResponse<InlineResponse20010?> {
        val localVariableConfig = apiCatalogPvtStockkeepingunitSkuIdPutRequestConfig(contentType = contentType, accept = accept, skuId = skuId, inlineObject5 = inlineObject5)

        return request<InlineObject5, InlineResponse20010>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiCatalogPvtStockkeepingunitSkuIdPut
    *
    * @param contentType Type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU’s unique numerical identifier 
    * @param inlineObject5  (optional)
    * @return RequestConfig
    */
    fun apiCatalogPvtStockkeepingunitSkuIdPutRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, inlineObject5: InlineObject5?) : RequestConfig<InlineObject5> {
        val localVariableBody = inlineObject5
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/catalog/pvt/stockkeepingunit/{skuId}".replace("{"+"skuId"+"}", "$skuId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List all SKU IDs
    * Retrieves the IDs of all SKUs in the store. Presents the result with page size and pagination.
    * @param page Result page number that you need retrieves SKU ID 
    * @param pagesize Page size that you need retrieves SKU ID, maximum value 1000 
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @return kotlin.collections.List<kotlin.Int>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listallSKUsID(page: kotlin.Int, pagesize: kotlin.Int, contentType: kotlin.String, accept: kotlin.String) : kotlin.collections.List<kotlin.Int> {
        val localVarResponse = listallSKUsIDWithHttpInfo(page = page, pagesize = pagesize, contentType = contentType, accept = accept)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.Int>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List all SKU IDs
    * Retrieves the IDs of all SKUs in the store. Presents the result with page size and pagination.
    * @param page Result page number that you need retrieves SKU ID 
    * @param pagesize Page size that you need retrieves SKU ID, maximum value 1000 
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @return ApiResponse<kotlin.collections.List<kotlin.Int>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listallSKUsIDWithHttpInfo(page: kotlin.Int, pagesize: kotlin.Int, contentType: kotlin.String, accept: kotlin.String) : ApiResponse<kotlin.collections.List<kotlin.Int>?> {
        val localVariableConfig = listallSKUsIDRequestConfig(page = page, pagesize = pagesize, contentType = contentType, accept = accept)

        return request<Unit, kotlin.collections.List<kotlin.Int>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listallSKUsID
    *
    * @param page Result page number that you need retrieves SKU ID 
    * @param pagesize Page size that you need retrieves SKU ID, maximum value 1000 
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @return RequestConfig
    */
    fun listallSKUsIDRequestConfig(page: kotlin.Int, pagesize: kotlin.Int, contentType: kotlin.String, accept: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("page", listOf(page.toString()))
                put("pagesize", listOf(pagesize.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/sku/stockkeepingunitids",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SKU
    * Retrieves a specific SKU by its ID. This information is exactly what is needed to create a new SKU.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU unique identifier number. 
    * @return Example4
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sku(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : Example4 {
        val localVarResponse = skuWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Example4
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU
    * Retrieves a specific SKU by its ID. This information is exactly what is needed to create a new SKU.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU unique identifier number. 
    * @return ApiResponse<Example4?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun skuWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : ApiResponse<Example4?> {
        val localVariableConfig = skuRequestConfig(contentType = contentType, accept = accept, skuId = skuId)

        return request<Unit, Example4>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sku
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU unique identifier number. 
    * @return RequestConfig
    */
    fun skuRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog/pvt/stockkeepingunit/{skuId}".replace("{"+"skuId"+"}", "$skuId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SKU and context
    * Retrieves context of an SKU
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU&#39;s unique identifier number 
    * @param sc Trade Policy&#39;s unique identifier number (optional, default to 1)
    * @return Example4
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun skuContext(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, sc: kotlin.Int?) : Example4 {
        val localVarResponse = skuContextWithHttpInfo(contentType = contentType, accept = accept, skuId = skuId, sc = sc)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Example4
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU and context
    * Retrieves context of an SKU
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU&#39;s unique identifier number 
    * @param sc Trade Policy&#39;s unique identifier number (optional, default to 1)
    * @return ApiResponse<Example4?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun skuContextWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, sc: kotlin.Int?) : ApiResponse<Example4?> {
        val localVariableConfig = skuContextRequestConfig(contentType = contentType, accept = accept, skuId = skuId, sc = sc)

        return request<Unit, Example4>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation skuContext
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param skuId SKU&#39;s unique identifier number 
    * @param sc Trade Policy&#39;s unique identifier number (optional, default to 1)
    * @return RequestConfig
    */
    fun skuContextRequestConfig(contentType: kotlin.String, accept: kotlin.String, skuId: kotlin.Int, sc: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (sc != null) {
                    put("sc", listOf(sc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/sku/stockkeepingunitbyid/{skuId}".replace("{"+"skuId"+"}", "$skuId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SkuId by RefId
    * Retrieves an SKU ID by the SKU&#39;s Reference ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param refId SKU reference ID 
    * @return kotlin.String
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun skuIdbyRefId(contentType: kotlin.String, accept: kotlin.String, refId: kotlin.String) : kotlin.String {
        val localVarResponse = skuIdbyRefIdWithHttpInfo(contentType = contentType, accept = accept, refId = refId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SkuId by RefId
    * Retrieves an SKU ID by the SKU&#39;s Reference ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param refId SKU reference ID 
    * @return ApiResponse<kotlin.String?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun skuIdbyRefIdWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, refId: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = skuIdbyRefIdRequestConfig(contentType = contentType, accept = accept, refId = refId)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation skuIdbyRefId
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param refId SKU reference ID 
    * @return RequestConfig
    */
    fun skuIdbyRefIdRequestConfig(contentType: kotlin.String, accept: kotlin.String, refId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/sku/stockkeepingunitidbyrefid/{refId}".replace("{"+"refId"+"}", "$refId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieve SkuId list by RefId list
    * Receives a list of Reference IDs and returns the same list with the corresponding SKU IDs. 
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param requestBody  (optional)
    * @return Example8
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun skuIdlistbyRefIdlist(contentType: kotlin.String, accept: kotlin.String, requestBody: kotlin.collections.List<kotlin.Int>?) : Example8 {
        val localVarResponse = skuIdlistbyRefIdlistWithHttpInfo(contentType = contentType, accept = accept, requestBody = requestBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Example8
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Retrieve SkuId list by RefId list
    * Receives a list of Reference IDs and returns the same list with the corresponding SKU IDs. 
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param requestBody  (optional)
    * @return ApiResponse<Example8?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun skuIdlistbyRefIdlistWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, requestBody: kotlin.collections.List<kotlin.Int>?) : ApiResponse<Example8?> {
        val localVariableConfig = skuIdlistbyRefIdlistRequestConfig(contentType = contentType, accept = accept, requestBody = requestBody)

        return request<kotlin.collections.List<kotlin.Int>, Example8>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation skuIdlistbyRefIdlist
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param requestBody  (optional)
    * @return RequestConfig
    */
    fun skuIdlistbyRefIdlistRequestConfig(contentType: kotlin.String, accept: kotlin.String, requestBody: kotlin.collections.List<kotlin.Int>?) : RequestConfig<kotlin.collections.List<kotlin.Int>> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/catalog_system/pub/sku/stockkeepingunitidsbyrefids",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SKU by Alternate ID
    * Retrieves an SKU by its Alternate ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param alternateId  
    * @return Example5
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun skubyAlternateId(contentType: kotlin.String, accept: kotlin.String, alternateId: kotlin.String) : Example5 {
        val localVarResponse = skubyAlternateIdWithHttpInfo(contentType = contentType, accept = accept, alternateId = alternateId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Example5
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU by Alternate ID
    * Retrieves an SKU by its Alternate ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param alternateId  
    * @return ApiResponse<Example5?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun skubyAlternateIdWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, alternateId: kotlin.String) : ApiResponse<Example5?> {
        val localVariableConfig = skubyAlternateIdRequestConfig(contentType = contentType, accept = accept, alternateId = alternateId)

        return request<Unit, Example5>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation skubyAlternateId
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param alternateId  
    * @return RequestConfig
    */
    fun skubyAlternateIdRequestConfig(contentType: kotlin.String, accept: kotlin.String, alternateId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/sku/stockkeepingunitbyalternateId/{alternateId}".replace("{"+"alternateId"+"}", "$alternateId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get SKU list by ProductId
    * Retrieves a list with the SKUs related to a product by the product&#39;s ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return kotlin.collections.List<Example7>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun skulistbyProductId(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.String) : kotlin.collections.List<Example7> {
        val localVarResponse = skulistbyProductIdWithHttpInfo(contentType = contentType, accept = accept, productId = productId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Example7>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get SKU list by ProductId
    * Retrieves a list with the SKUs related to a product by the product&#39;s ID.
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return ApiResponse<kotlin.collections.List<Example7>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun skulistbyProductIdWithHttpInfo(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.String) : ApiResponse<kotlin.collections.List<Example7>?> {
        val localVariableConfig = skulistbyProductIdRequestConfig(contentType = contentType, accept = accept, productId = productId)

        return request<Unit, kotlin.collections.List<Example7>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation skulistbyProductId
    *
    * @param contentType Describes the type of the content being sent 
    * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  
    * @param productId Product’s unique numerical identifier 
    * @return RequestConfig
    */
    fun skulistbyProductIdRequestConfig(contentType: kotlin.String, accept: kotlin.String, productId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/catalog_system/pvt/sku/stockkeepingunitByProductId/{productId}".replace("{"+"productId"+"}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
