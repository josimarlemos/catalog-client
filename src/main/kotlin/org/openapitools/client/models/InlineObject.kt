/**
 * Catalog API
 *
 * Methods for collecting product/sku catalog data, categories, brands and other information. <br><br> All content that comes between {{}} keys must be replaced with the correct data before performing the request. <br><br> Common parameters that must be changed in most VTEX requests <br> {{accountName}} => Store account name <br> {{environment}} => The environment that will be called. Change for vtexcommercestable or vtexcommmercebeta <br> {{X-VTEX-API-AppKey}} => Located in the headers of the requests, user authentication key <br> {{X-VTEX-API-AppToken}} => Located in the headers of the requests, authentication password
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * @param name Product's name.
 * @param categoryId Category ID associated with this product.
 * @param brandId Brand ID associated with this product.
 * @param departmentId Department ID according to the product's category. This field should not be provided during product creation.
 * @param linkId String to be used to build the product URL. If it not informed, it will be generated according to product's name replacing space and special character by hifen (-).
 * @param refId Product Reference Code.
 * @param isVisible Show (`true`) or hide (`false`) product in search result and product page but can be added into shopping cart. Usually applicable for gifts.
 * @param description Product description.
 * @param descriptionShort Product Short description. This information is presented by:  Store Framework:  $product.DescriptionShort control  Classic CMS:   And can be displayed on both the product page and the shelf.  
 * @param releaseDate Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` querystring, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.
 * @param keyWords Store Framework: Deprecated  Classic CMS: Synonyms of terms related to product. \"Television\", for example, can have a substitute word like \"TV\". This field is important to make your searches more comprehensive.  
 * @param title Product's Title tag. Is presented  in the browser tab and corresponds to the title of the product page. This field is important for SEO.
 * @param isActive Activate (`true`) or inactivate (`false`) product.
 * @param taxCode Product fiscal number. Usually used for tax calculation.
 * @param metaTagDescription Brief description of the product for SEO. It's recommended that you don't exceed 150 characters.
 * @param supplierId 
 * @param showWithoutStock If `true`, activates `Notify Me` form when the product is out of stock.
 * @param adWordsRemarketingCode This is a legacy field. Do not take this information into consideration.
 * @param lomadeeCampaignCode This is a legacy field. Do not take this information into consideration.
 * @param score Value used to set the priority on the search result page.
 */

data class InlineObject (

    /* Product's name. */
    @Json(name = "Name")
    val name: kotlin.String,

    /* Category ID associated with this product. */
    @Json(name = "CategoryId")
    val categoryId: kotlin.Int,

    /* Brand ID associated with this product. */
    @Json(name = "BrandId")
    val brandId: kotlin.Int,

    /* Department ID according to the product's category. This field should not be provided during product creation. */
    @Json(name = "DepartmentId")
    val departmentId: kotlin.Int? = null,

    /* String to be used to build the product URL. If it not informed, it will be generated according to product's name replacing space and special character by hifen (-). */
    @Json(name = "LinkId")
    val linkId: kotlin.String? = null,

    /* Product Reference Code. */
    @Json(name = "RefId")
    val refId: kotlin.String? = null,

    /* Show (`true`) or hide (`false`) product in search result and product page but can be added into shopping cart. Usually applicable for gifts. */
    @Json(name = "IsVisible")
    val isVisible: kotlin.Boolean? = null,

    /* Product description. */
    @Json(name = "Description")
    val description: kotlin.String? = null,

    /* Product Short description. This information is presented by:  Store Framework:  $product.DescriptionShort control  Classic CMS:   And can be displayed on both the product page and the shelf.   */
    @Json(name = "DescriptionShort")
    val descriptionShort: kotlin.String? = null,

    /* Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` querystring, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections. */
    @Json(name = "ReleaseDate")
    val releaseDate: kotlin.String? = null,

    /* Store Framework: Deprecated  Classic CMS: Synonyms of terms related to product. \"Television\", for example, can have a substitute word like \"TV\". This field is important to make your searches more comprehensive.   */
    @Json(name = "KeyWords")
    val keyWords: kotlin.String? = null,

    /* Product's Title tag. Is presented  in the browser tab and corresponds to the title of the product page. This field is important for SEO. */
    @Json(name = "Title")
    val title: kotlin.String? = null,

    /* Activate (`true`) or inactivate (`false`) product. */
    @Json(name = "IsActive")
    val isActive: kotlin.Boolean? = null,

    /* Product fiscal number. Usually used for tax calculation. */
    @Json(name = "TaxCode")
    val taxCode: kotlin.String? = null,

    /* Brief description of the product for SEO. It's recommended that you don't exceed 150 characters. */
    @Json(name = "MetaTagDescription")
    val metaTagDescription: kotlin.String? = null,

    @Json(name = "SupplierId")
    @Deprecated(message = "This property is deprecated.")
    val supplierId: kotlin.Int? = null,

    /* If `true`, activates `Notify Me` form when the product is out of stock. */
    @Json(name = "ShowWithoutStock")
    val showWithoutStock: kotlin.Boolean? = null,

    /* This is a legacy field. Do not take this information into consideration. */
    @Json(name = "AdWordsRemarketingCode")
    val adWordsRemarketingCode: kotlin.String? = null,

    /* This is a legacy field. Do not take this information into consideration. */
    @Json(name = "LomadeeCampaignCode")
    val lomadeeCampaignCode: kotlin.String? = null,

    /* Value used to set the priority on the search result page. */
    @Json(name = "Score")
    val score: kotlin.Int? = null

)

